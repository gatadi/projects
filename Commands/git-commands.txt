-------------------------------------------
Installing & Configuring Git
-------------------------------------------
> sudp apt-get install git

Configuration (setting will be stored in ~/.gitconfig )

> git config --global user.name
> git config --global user.email
> git config --global core.editor  vim
> git config --global merge.tool vimdiff
> git config --global http.proxy

List config setting
> git config --list

-------------------------------------------
Git Basics
-------------------------------------------

Initializing repository in an existing directory
> git init

Checking out a file for edit
> git add some-file.txt

Checking out all files under current folder for edit
> git add .

Submitting changes to repository
> git commit -m "message goes here"

Getting copy of existing Git repository

HTTP/HTTPS Protocol
> git clone http://github.com/workarea.git
> git clone http://github.com/user/project1.git
> git cloen http://github.com/user/project1.git myproject

SSH Protocol
> git clone user@server:/user/project1.git

Git Protocol
> git clone git://github.com/user/project1.git

Getting status  (untracked (not added to git), staged (added to git)
> git status

Pull and Push files to/from remote repository
> git pull
> git push

Creating origins for remote repositories
> git remote add sofi https://github.com/gatadi/sofi-service.git
> git remote add cart https://github.com/gatadi/cart-service.git

Shows current remote origins
> git remote -v
> git remote show origin

Removing and Renaming remote origin
> git remote rm origin
> git remote rename origin sofi

Pull sofi master branch files to current folder
> git pull sofi master

Push current folder files to sofi master branch
> git push -u sofi master

Ingoring Files (~/.gitignore)

Deleting Files
> git rm file1.txt

Renaming Files
> git mv file1.txt file2.txt

Viewing commit history
> git log
> git log --pretty=oneline
> git log --pretty=format:"%h - %an, %ar : %s"
> git log --pretty=format:"%h %s" --graph
> git log --since=2.weeks

GUI tool for history
> gitk

Changing Last commit
> git commit -m ’initial commit’
> git add forgotten_file
> git commit --amend

Unstaging staged file
> git reset HEAD file1.txt

Unmodifying modified file
> git checkout -- file1.txt

Annotated Tags
> git tag
> git tag -a v1.0 -m "my first tag"
> git show v1.0

Lightweight Tags
> git tag v1.1-lw

Tag from already committed changes
> git tag -a v2.0 md5xxx -m "tag from md5"

Pushing tags to remote repository
> git push origin v1.0

---------------------------------------------
P4Merge with GIT http://www.andymcintosh.com/?p=33
---------------------------------------------
Download and Install P4V
Download the free Perforce Visual Client dmg from here. Once it’s downloaded, copy p4merge from the disk image to your /Applications directory.

Write some simple shell scripts
p4merge*
Create a new text file in /usr/local/bin called p4merge and add the following lines:

#!/bin/sh
/Applications/p4merge.app/Contents/MacOS/p4merge $*
Make the script executable by entering this command:

chmod +x p4merge
p4diff*
Create a new text file in /usr/local/bin called p4diff and add the following lines:

#!/bin/sh
[ $# -eq 7 ] && /usr/local/bin/p4merge "$2" "$5"
Make the script executable by entering this command:

chmod +x p4diff
Configure Git to use the scripts
Open your git configuration file (probably ~/.gitconig) and add these lines:

[merge]
	keepBackup = false;
	tool = p4merge
[mergetool "p4merge"]
	cmd = p4merge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
	keepTemporaries = false
	trustExitCode = false
	keepBackup = false
[diff]
	external = p4diff
    
    
---------------------------------------------
Git Branching
---------------------------------------------

