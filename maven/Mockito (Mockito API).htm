<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0062)http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<!-- Generated by javadoc (build 1.5.0_22) on Mon May 24 23:05:16 CEST 2010 -->
<title>Mockito (Mockito API)</title>

<meta name="keywords" content="org.mockito.Mockito class">

<link rel="stylesheet" type="text/css" href="./Mockito (Mockito API)_files/stylesheet.css" title="Style">

<script type="text/javascript">
function windowTitle()
{
    parent.document.title="Mockito (Mockito API)";
}
</script>
<noscript>
</noscript>

</head>

<body bgcolor="white" onload="windowTitle();">


<!-- ========= START OF TOP NAVBAR ======= -->
<a name="navbar_top"><!-- --></a>
<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#skip-navbar_top" title="Skip navigation links"></a>
<table border="0" width="100%" cellpadding="1" cellspacing="0" summary="">
<tbody><tr>
<td colspan="2" bgcolor="#EEEEFF" class="NavBarCell1">
<a name="navbar_top_firstrow"><!-- --></a>
<table border="0" cellpadding="0" cellspacing="3" summary="">
  <tbody><tr align="center" valign="top">
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="http://docs.mockito.googlecode.com/hg/overview-summary.html"><font class="NavBarFont1"><b>Overview</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="http://docs.mockito.googlecode.com/hg/org/mockito/package-summary.html"><font class="NavBarFont1"><b>Package</b></font></a>&nbsp;</td>
  <td bgcolor="#FFFFFF" class="NavBarCell1Rev"> &nbsp;<font class="NavBarFont1Rev"><b>Class</b></font>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="http://docs.mockito.googlecode.com/hg/org/mockito/class-use/Mockito.html"><font class="NavBarFont1"><b>Use</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="http://docs.mockito.googlecode.com/hg/org/mockito/package-tree.html"><font class="NavBarFont1"><b>Tree</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="http://docs.mockito.googlecode.com/hg/deprecated-list.html"><font class="NavBarFont1"><b>Deprecated</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="http://docs.mockito.googlecode.com/hg/index-all.html"><font class="NavBarFont1"><b>Index</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="http://docs.mockito.googlecode.com/hg/help-doc.html"><font class="NavBarFont1"><b>Help</b></font></a>&nbsp;</td>
  </tr>
</tbody></table>
</td>
<td align="right" valign="top" rowspan="3"><em>
</em>
</td>
</tr>

<tr>
<td bgcolor="white" class="NavBarCell2"><font size="-2">
&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mock.html" title="annotation in org.mockito"><b>PREV CLASS</b></a>&nbsp;
&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/MockitoAnnotations.html" title="class in org.mockito"><b>NEXT CLASS</b></a></font></td>
<td bgcolor="white" class="NavBarCell2"><font size="-2">
  <a href="http://docs.mockito.googlecode.com/hg/index.html?org/mockito/Mockito.html" target="_top"><b>FRAMES</b></a>  &nbsp;
&nbsp;<a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" target="_top"><b>NO FRAMES</b></a>  &nbsp;
&nbsp;<script type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</script><a href="http://docs.mockito.googlecode.com/hg/allclasses-noframe.html"><b>All Classes</b></a>

<noscript>
  &lt;A HREF="../../allclasses-noframe.html"&gt;&lt;B&gt;All Classes&lt;/B&gt;&lt;/A&gt;
</noscript>


</font></td>
</tr>
<tr>
<td valign="top" class="NavBarCell3"><font size="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#field_summary">FIELD</a>&nbsp;|&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#constructor_summary">CONSTR</a>&nbsp;|&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#method_summary">METHOD</a></font></td>
<td valign="top" class="NavBarCell3"><font size="-2">
DETAIL:&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#field_detail">FIELD</a>&nbsp;|&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#constructor_detail">CONSTR</a>&nbsp;|&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#method_detail">METHOD</a></font></td>
</tr>
</tbody></table>
<a name="skip-navbar_top"></a>
<!-- ========= END OF TOP NAVBAR ========= -->

<hr>
<!-- ======== START OF CLASS DATA ======== -->
<h2>
<font size="-1">
org.mockito</font>
<br>
Class Mockito</h2>
<pre>java.lang.Object
  <img src="./Mockito (Mockito API)_files/inherit.gif" alt="extended by "><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html" title="class in org.mockito">org.mockito.Matchers</a>
      <img src="./Mockito (Mockito API)_files/inherit.gif" alt="extended by "><b>org.mockito.Mockito</b>
</pre>
<dl>
<dt><b>Direct Known Subclasses:</b> </dt><dd><a href="http://docs.mockito.googlecode.com/hg/org/mockito/BDDMockito.html" title="class in org.mockito">BDDMockito</a></dd>
</dl>
<hr>
<dl>
<dt><pre>public class <b>Mockito</b><dt>extends <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html" title="class in org.mockito">Matchers</a></dt></pre></dt></dl>


<p>
</p><p align="left"><img src="./Mockito (Mockito API)_files/logo.jpg"></p>
 Mockito library enables mocks creation, verification and stubbing.
 <p>
 This javadoc content is also available on the <a href="http://mockito.org/">http://mockito.org</a> web page. 
 All documentation is kept in javadocs because it guarantees consistency between what's on the web and what's in the source code.
 Also, it makes possible to access documentation straight from the IDE even if you work offline.   
 
 </p><h1>Contents</h1>
 
 <b> 
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#1">1. Let's verify some behaviour! </a><br> 
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#2">2. How about some stubbing? </a><br>
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#3">3. Argument matchers </a><br>
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#4">4. Verifying exact number of invocations / at least once / never </a><br> 
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#5">5. Stubbing void methods with exceptions </a><br> 
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#6">6. Verification in order </a><br> 
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#7">7. Making sure interaction(s) never happened on mock </a><br> 
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#8">8. Finding redundant invocations </a><br> 
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#9">9. Shorthand for mocks creation - @Mock annotation </a><br> 
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#10">10. Stubbing consecutive calls (iterator-style stubbing) </a><br> 
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#11">11. Stubbing with callbacks </a><br>
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#12">12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids </a><br>
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#13">13. Spying on real objects </a><br>
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#14">14. Changing default return values of unstubbed invocations (Since 1.7) </a><br>
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#15">15. Capturing arguments for further assertions (Since 1.8.0) </a><br>
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#16">16. Real partial mocks (Since 1.8.0) </a><br>
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#17">17. Resetting mocks (Since 1.8.0) </a><br>
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#18">18. Troubleshooting &amp; validating framework usage (Since 1.8.0) </a><br>
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#19">19. Aliases for behavior driven development (Since 1.8.0) </a><br>
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#20">20. Serializable mocks (Since 1.8.1) </a><br>
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#21">21. New annotations: @Captor, @Spy, @InjectMocks (Since 1.8.3) </a><br>
      <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#22">22. (**New**) Verification with timeout (Since 1.8.5) </a><br>
 </b>
 
 <p>
 Following examples mock a List, because everyone knows its interface (methods
 like add(), get(), clear() will be used). <br>
 You probably wouldn't mock List class 'in real'.
 
 </p><h3 id="1">1. Let's verify some behaviour!</h3>
 
 <pre> //Let's import Mockito statically so that the code looks clearer
 import static org.mockito.Mockito.*;
 
 //mock creation
 List mockedList = mock(List.class);

 //using mock object
 mockedList.add("one");
 mockedList.clear();

 //verification
 verify(mockedList).add("one");
 verify(mockedList).clear();
 </pre>
 
 <p>
 Once created, mock will remember all interactions. Then you can selectively
 verify whatever interaction you are interested in.
 
 </p><h3 id="2">2. How about some stubbing?</h3>
 
 <pre> //You can mock concrete classes, not only interfaces
 LinkedList mockedList = mock(LinkedList.class);
 
 //stubbing
 when(mockedList.get(0)).thenReturn("first");
 when(mockedList.get(1)).thenThrow(new RuntimeException());
 
 //following prints "first"
 System.out.println(mockedList.get(0));
 
 //following throws runtime exception
 System.out.println(mockedList.get(1));
 
 //following prints "null" because get(999) was not stubbed
 System.out.println(mockedList.get(999));
  
 //Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>
 //If your code cares what get(0) returns then something else breaks (often before even verify() gets executed).
 //If your code doesn't care what get(0) returns then it should not be stubbed. Not convinced? See <a href="http://monkeyisland.pl/2008/04/26/asking-and-telling">here</a>.
 verify(mockedList).get(0);
 </pre>
 
 <ul>
 <li> By default, for all methods that return value, mock returns null, an
 empty collection or appropriate primitive/primitive wrapper value (e.g: 0,
 false, ... for int/Integer, boolean/Boolean, ...). </li>
 
 <li> Stubbing can be overridden: for example common stubbing can go to
 fixture setup but the test methods can override it.
 Please note that overridding stubbing is a potential code smell that points out too much stubbing</li>
 
 <li> Once stubbed, the method will always return stubbed value regardless
 of how many times it is called. </li>
 
 <li> Last stubbing is more important - when you stubbed the same method with
 the same arguments many times. </li>
 
 </ul>
 
 <h3 id="3">3. Argument matchers</h3>
 
 Mockito verifies argument values in natural java style: by using an equals() method.
 Sometimes, when extra flexibility is required then you might use argument matchers:  
 
 <pre> //stubbing using built-in anyInt() argument matcher
 when(mockedList.get(anyInt())).thenReturn("element");
 
 //stubbing using hamcrest (let's say isValid() returns your own hamcrest matcher):
 when(mockedList.contains(argThat(isValid()))).thenReturn("element");
 
 //following prints "element"
 System.out.println(mockedList.get(999));
 
 //<b>you can also verify using an argument matcher</b>
 verify(mockedList).get(anyInt());
 </pre>
 
 <p>
 Argument matchers allow flexible verification or stubbing. 
 <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html" title="class in org.mockito"><code>Click here to see</code></a> more built-in matchers 
 and examples of <b>custom argument matchers / hamcrest matchers</b>.
 </p><p>
 For information solely on <b>custom argument matchers</b> check out javadoc for <a href="http://docs.mockito.googlecode.com/hg/org/mockito/ArgumentMatcher.html" title="class in org.mockito"><code>ArgumentMatcher</code></a> class.
 </p><p>
 Be reasonable with using complicated argument matching.
 The natural matching style using equals() with occasional anyX() matchers tend to give clean &amp; simple tests.
 Sometimes it's just better to refactor the code to allow equals() matching or even implement equals() method to help out with testing.
 </p><p>
 Also, read <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#15">section 15</a> or javadoc for <a href="http://docs.mockito.googlecode.com/hg/org/mockito/ArgumentCaptor.html" title="class in org.mockito"><code>ArgumentCaptor</code></a> class.
 <a href="http://docs.mockito.googlecode.com/hg/org/mockito/ArgumentCaptor.html" title="class in org.mockito"><code>ArgumentCaptor</code></a> is a special implementation of an argument matcher that captures argument values for further assertions.  
 </p><p>
 <b>Warning on argument matchers:</b>
 </p><p>
 If you are using argument matchers, <b>all arguments</b> have to be provided
 by matchers.
 </p><p>
 E.g: (example shows verification but the same applies to stubbing):
 
 </p><pre>   verify(mock).someMethod(anyInt(), anyString(), <b>eq("third argument")</b>);
   //above is correct - eq() is also an argument matcher
   
   verify(mock).someMethod(anyInt(), anyString(), <b>"third argument"</b>);
   //above is incorrect - exception will be thrown because third argument is given without an argument matcher.
 </pre>
 
 <h3 id="4">4. Verifying exact number of invocations / at least x / never</h3>
 
 <pre> //using mock 
 mockedList.add("once");
 
 mockedList.add("twice");
 mockedList.add("twice");
 
 mockedList.add("three times");
 mockedList.add("three times");
 mockedList.add("three times");
 
 //following two verifications work exactly the same - times(1) is used by default
 verify(mockedList).add("once");
 verify(mockedList, times(1)).add("once");
 
 //exact number of invocations verification
 verify(mockedList, times(2)).add("twice");
 verify(mockedList, times(3)).add("three times");
 
 //verification using never(). never() is an alias to times(0)
 verify(mockedList, never()).add("never happened");
 
 //verification using atLeast()/atMost()
 verify(mockedList, atLeastOnce()).add("three times");
 verify(mockedList, atLeast(2)).add("five times");
 verify(mockedList, atMost(5)).add("three times");
 
 </pre>
 
 <p>
 <b>times(1) is the default.</b> Therefore using times(1) explicitly can be
 omitted.
 
 </p><h3 id="5">5. Stubbing void methods with exceptions</h3>
 
 <pre>   doThrow(new RuntimeException()).when(mockedList).clear();
   
   //following throws RuntimeException:
   mockedList.clear();
 </pre>
 
 Read more about doThrow|doAnswer family of methods in paragraph 12.
 <p>
 Initially, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#stubVoid(T)"><code>stubVoid(Object)</code></a> was used for stubbing voids.
 Currently stubVoid() is deprecated in favor of <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#doThrow(java.lang.Throwable)"><code>doThrow(Throwable)</code></a>.
 This is because of improved readability and consistency with the family of <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#doAnswer(org.mockito.stubbing.Answer)"><code>doAnswer(Answer)</code></a> methods. 
 
 </p><h3 id="6">6. Verification in order</h3>
 
 <pre> List firstMock = mock(List.class);
 List secondMock = mock(List.class);
 
 //using mocks
 firstMock.add("was called first");
 secondMock.add("was called second");
 
 //create inOrder object passing any mocks that need to be verified in order
 InOrder inOrder = inOrder(firstMock, secondMock);
 
 //following will make sure that firstMock was called before secondMock
 inOrder.verify(firstMock).add("was called first");
 inOrder.verify(secondMock).add("was called second");
 </pre>
 
 Verification in order is flexible - <b>you don't have to verify all
 interactions</b> one-by-one but only those that you are interested in
 testing in order.
 <p>
 Also, you can create InOrder object passing only mocks that are relevant for
 in-order verification.
 
 </p><h3 id="7">7. Making sure interaction(s) never happened on mock</h3>
 
 <pre> //using mocks - only mockOne is interacted
 mockOne.add("one");
 
 //ordinary verification
 verify(mockOne).add("one");
 
 //verify that method was never called on a mock
 verify(mockOne, never()).add("two");
 
 //verify that other mocks were not interacted
 verifyZeroInteractions(mockTwo, mockThree);
 
 </pre>
 
 <h3 id="8">8. Finding redundant invocations</h3>
 
 <pre> //using mocks
 mockedList.add("one");
 mockedList.add("two");
 
 verify(mockedList).add("one");
 
 //following verification will fail 
 verifyNoMoreInteractions(mockedList);
 </pre>
 
 A word of <b>warning</b>: 
 Some users who did a lot of classic, expect-run-verify mocking tend to use verifyNoMoreInteractions() very often, even in every test method. 
 verifyNoMoreInteractions() is not recommended to use in every test method. 
 verifyNoMoreInteractions() is a handy assertion from the interaction testing toolkit. Use it only when it's relevant.
 Abusing it leads to overspecified, less maintainable tests. You can find further reading 
 <a href="http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/">here</a>.
 
 <p>   
 See also <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#never()"><code>never()</code></a> - it is more explicit and
 communicates the intent well.
 </p><p>
 
 </p><h3 id="9">9. Shorthand for mocks creation - @Mock annotation</h3>
 
 <ul>
 <li>Minimizes repetitive mock creation code.</li>
 <li>Makes the test class more readable.</li>
 <li>Makes the verification error easier to read because the <b>field name</b>
 is used to identify the mock.</li>
 </ul>
 
 <pre>   public class ArticleManagerTest { 
     
       @Mock private ArticleCalculator calculator;
       @Mock private ArticleDatabase database;
       @Mock private UserProvider userProvider;
     
       private ArticleManager manager;
 </pre>
 
 <b>Important!</b> This needs to be somewhere in the base class or a test
 runner:
 
 <pre> MockitoAnnotations.initMocks(testClass);
 </pre>
 
 You can use built-in runner: <a href="http://docs.mockito.googlecode.com/hg/org/mockito/runners/MockitoJUnitRunner.html" title="class in org.mockito.runners"><code>MockitoJUnitRunner</code></a>.
 <p>
 Read more here: <a href="http://docs.mockito.googlecode.com/hg/org/mockito/MockitoAnnotations.html" title="class in org.mockito"><code>MockitoAnnotations</code></a>
 
 </p><h3 id="10"> 10. Stubbing consecutive calls (iterator-style stubbing)</h3>
 
 Sometimes we need to stub with different return value/exception for the same
 method call. Typical use case could be mocking iterators. 
 Original version of Mockito did not have this feature to promote simple mocking. 
 For example, instead of iterators one could use <code>Iterable</code> or simply
 collections. Those offer natural ways of stubbing (e.g. using real
 collections). In rare scenarios stubbing consecutive calls could be useful,
 though:
 <p>
 
 </p><pre> when(mock.someMethod("some arg"))
   .thenThrow(new RuntimeException())
   .thenReturn("foo");
 
 //First call: throws runtime exception:
 mock.someMethod("some arg");
 
 //Second call: prints "foo"
 System.out.println(mock.someMethod("some arg"));
 
 //Any consecutive call: prints "foo" as well (last stubbing wins). 
 System.out.println(mock.someMethod("some arg"));
 </pre>
 
 Alternative, shorter version of consecutive stubbing:
 
 <pre> when(mock.someMethod("some arg"))
   .thenReturn("one", "two", "three");
 </pre>
 
 <h3 id="11"> 11. Stubbing with callbacks</h3>
 
 Allows stubbing with generic <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing"><code>Answer</code></a> interface.
  <p>
 Yet another controversial feature which was not included in Mockito
 originally. We recommend using simple stubbing with thenReturn() or
 thenThrow() only. Those two should be <b>just enough</b> to test/test-drive
 any clean &amp; simple code.
 
 </p><pre> when(mock.someMethod(anyString())).thenAnswer(new Answer() {
     Object answer(InvocationOnMock invocation) {
         Object[] args = invocation.getArguments();
         Object mock = invocation.getMock();
         return "called with arguments: " + args;
     }
 });
 
 //Following prints "called with arguments: foo"
 System.out.println(mock.someMethod("foo"));
 </pre>
 
 <h3 id="12"> 12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods for stubbing voids (mostly)</h3>
 
 Stubbing voids requires different approach from <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#when(T)"><code>when(Object)</code></a> because the compiler does not like void methods inside brackets...
 <p>
 <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#doThrow(java.lang.Throwable)"><code>doThrow(Throwable)</code></a> replaces the <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#stubVoid(T)"><code>stubVoid(Object)</code></a> method for stubbing voids. 
 The main reason is improved readability and consistency with the family of doAnswer() methods.
 </p><p>
 Use doThrow() when you want to stub a void method with an exception:
 </p><pre>   doThrow(new RuntimeException()).when(mockedList).clear();
   
   //following throws RuntimeException:
   mockedList.clear();
 </pre>
 
 Read more about other methods:
 <p>
 <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#doThrow(java.lang.Throwable)"><code>doThrow(Throwable)</code></a>
 </p><p>
 <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#doAnswer(org.mockito.stubbing.Answer)"><code>doAnswer(Answer)</code></a>
 </p><p>
 <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#doNothing()"><code>doNothing()</code></a>
 </p><p>
 <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#doReturn(java.lang.Object)"><code>doReturn(Object)</code></a>
 
 </p><h3 id="13"> 13. Spying on real objects</h3>
 
 You can create spies of real objects. When you use the spy then the <b>real</b> methods are called (unless a method was stubbed).
 <p>
 Real spies should be used <b>carefully and occasionally</b>, for example when dealing with legacy code.
 
 </p><p>
 Spying on real objects can be associated with "partial mocking" concept. 
 <b>Before the release 1.8</b>, Mockito spies were not real partial mocks. 
 The reason was we thought partial mock is a code smell. 
 At some point we found legitimate use cases for partial mocks 
 (3rd party interfaces, interim refactoring of legacy code, the full article is <a href="http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring">here</a>)
 </p><p>

 </p><pre>   List list = new LinkedList();
   List spy = spy(list);
 
   //optionally, you can stub out some methods:
   when(spy.size()).thenReturn(100);
 
   //using the spy calls <b>real</b> methods
   spy.add("one");
   spy.add("two");
 
   //prints "one" - the first element of a list
   System.out.println(spy.get(0));
 
   //size() method was stubbed - 100 is printed
   System.out.println(spy.size());
 
   //optionally, you can verify
   verify(spy).add("one");
   verify(spy).add("two");
 </pre>
 
 <h4>Important gotcha on spying real objects!</h4>
 
 1. Sometimes it's impossible to use <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#when(T)"><code>when(Object)</code></a> for stubbing spies. Example:
 
 <pre>   List list = new LinkedList();
   List spy = spy(list);
   
   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)
   when(spy.get(0)).thenReturn("foo");
   
   //You have to use doReturn() for stubbing
   doReturn("foo").when(spy).get(0);
 </pre>
 
 2. Watch out for final methods. 
 Mockito doesn't mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method = trouble.
 What will happen is the real method will be called *on mock* but *not on the real instance* you passed to the spy() method.
 Typically you may get a NullPointerException because mock instances don't have fields initiated.
 
 <h3 id="14">14. Changing default return values of unstubbed invocations (Since 1.7) </h3>
 
 You can create a mock with specified strategy for its return values.
 It's quite advanced feature and typically you don't need it to write decent tests.
 However, it can be helpful for working with <b>legacy systems</b>.
 <p>
 It is the default answer so it will be used <b>only when you don't</b> stub the method call.
 
 </p><pre>   Foo mock = mock(Foo.class, Mockito.RETURNS_SMART_NULLS);
   Foo mockTwo = mock(Foo.class, new YourOwnAnswer()); 
 </pre>
 
 <p>
 Read more about this interesting implementation of <i>Answer</i>: <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#RETURNS_SMART_NULLS"><code>RETURNS_SMART_NULLS</code></a>
 
 </p><h3 id="15">15. Capturing arguments for further assertions (Since 1.8.0) </h3>
 
 Mockito verifies argument values in natural java style: by using an equals() method.
 This is also the recommended way of matching arguments because it makes tests clean &amp; simple.
 In some situations though, it is helpful to assert on certain arguments after the actual verification.
 For example:
 <pre>   ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);
   verify(mock).doSomething(argument.capture());
   assertEquals("John", argument.getValue().getName());
 </pre>
 
 <b>Warning:</b> it is recommended to use ArgumentCaptor with verification <b>but not</b> with stubbing.
 Using ArgumentCaptor with stubbing may decrease test readability because captor is created outside of assert (aka verify or 'then') block.
 Also it may reduce defect localization because if stubbed method was not called then no argument is captured.
 <p>
 In a way ArgumentCaptor is related to custom argument matchers (see javadoc for <a href="http://docs.mockito.googlecode.com/hg/org/mockito/ArgumentMatcher.html" title="class in org.mockito"><code>ArgumentMatcher</code></a> class).
 Both techniques can be used for making sure certain arguments where passed to mocks. 
 However, ArgumentCaptor may be a better fit if:
 </p><ul>  
 <li>custom argument matcher is not likely to be reused</li>
 <li>you just need it to assert on argument values to complete verification</li>
 </ul>
 Custom argument matchers via <a href="http://docs.mockito.googlecode.com/hg/org/mockito/ArgumentMatcher.html" title="class in org.mockito"><code>ArgumentMatcher</code></a> are usually better for stubbing.
 
 <h3 id="16">16. Real partial mocks (Since 1.8.0) </h3>
  
  Finally, after many internal debates &amp; discussions on the mailing list, partial mock support was added to Mockito.
  Previously we considered partial mocks as code smells. However, we found a legitimate use case for partial mocks - more reading:
  <a href="http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring">here</a>
  <p>
  <b>Before release 1.8</b> spy() was not producing real partial mocks and it was confusing for some users.
  Read more about spying: <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#13">here</a> or in javadoc for <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#spy(T)"><code>spy(Object)</code></a> method. 
  </p><p>
  </p><pre>    //you can create partial mock with spy() method:    
    List list = spy(new LinkedList());
    
    //you can enable partial mock capabilities selectively on mocks:
    Foo mock = mock(Foo.class);
    //Be sure the real implementation is 'safe'.
    //If real implementation throws exceptions or depends on specific state of the object then you're in trouble.
    when(mock.someMethod()).thenCallRealMethod();
  </pre>
  
 As usual you are going to read <b>the partial mock warning</b>:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't... 
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 <p>
 However, there are rare cases when partial mocks come handy: 
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven &amp; well-designed code.
  
 </p><h3 id="17">17. Resetting mocks (Since 1.8.0) </h3>
  
 Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.
 Normally, you don't need to reset your mocks, just create new mocks for each test method. 
 <p>
 Instead of reset() please consider writing simple, small and focused test methods over lengthy, over-specified tests.
 <b>First potential code smell is reset() in the middle of the test method.</b> This probably means you're testing too much.
 Follow the whisper of your test methods: "Please keep us small &amp; focused on single behavior". 
 There are several threads about it on mockito mailing list.
 </p><p>
 The only reason we added reset() method is to
 make it possible to work with container-injected mocks.
 See issue 55 (<a href="http://code.google.com/p/mockito/issues/detail?id=55">here</a>)
 or FAQ (<a href="http://code.google.com/p/mockito/wiki/FAQ">here</a>).
 </p><p>
 <b>Don't harm yourself.</b> reset() in the middle of the test method is a code smell (you're probably testing too much). 
 </p><pre>   List mock = mock(List.class);
   when(mock.size()).thenReturn(10);
   mock.add(1);
   
   reset(mock);
   //at this point the mock forgot any interactions &amp; stubbing
 </pre>
  
 <h3 id="18">18. Troubleshooting &amp; validating framework usage (Since 1.8.0) </h3>
 
 First of all, in case of any trouble, I encourage you to read the Mockito FAQ: 
 <a href="http://code.google.com/p/mockito/wiki/FAQ">http://code.google.com/p/mockito/wiki/FAQ</a>
 <p>
 In case of questions you may also post to mockito mailing list: 
 <a href="http://groups.google.com/group/mockito">http://groups.google.com/group/mockito</a>
 </p><p>
 Next, you should know that Mockito validates if you use it correctly <b>all the time</b>. 
 However, there's a gotcha so please read the javadoc for <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#validateMockitoUsage()"><code>validateMockitoUsage()</code></a>
 
 </p><h3 id="19">19. Aliases for behavior driven development (Since 1.8.0) </h3>
 
 Behavior Driven Development style of writing tests uses <b>//given //when //then</b> comments as fundamental parts of your test methods.
 This is exactly how we write our tests and we warmly encourage you to do so!
 <p>
 Start learning about BDD here: <a href="http://en.wikipedia.org/wiki/Behavior_Driven_Development">http://en.wikipedia.org/wiki/Behavior_Driven_Development</a>
 </p><p>
 The problem is that current stubbing api with canonical role of <b>when</b> word does not integrate nicely with <b>//given //when //then</b> comments.
 It's because stubbing belongs to <b>given</b> component of the test and not to the <b>when</b> component of the test. 
 Hence <a href="http://docs.mockito.googlecode.com/hg/org/mockito/BDDMockito.html" title="class in org.mockito"><code>BDDMockito</code></a> class introduces an alias so that you stub method calls with <a href="http://docs.mockito.googlecode.com/hg/org/mockito/BDDMockito.html#given(T)"><code>BDDMockito.given(Object)</code></a> method. 
 Now it really nicely integrates with the <b>given</b> component of a BDD style test!  
 </p><p>
 Here is how the test might look like: 
 </p><pre> import static org.mockito.BDDMockito.*;
 
 Seller seller = mock(Seller.class);
 Shop shop = new Shop(seller);
 
 public void shouldBuyBread() throws Exception {
   //given  
   given(seller.askForBread()).willReturn(new Bread());
   
   //when
   Goods goods = shop.buyBread();
   
   //then
   assertThat(goods, containBread());
 }  
 </pre>
 
 <h3 id="20">20. (**New**) Serializable mocks (Since 1.8.1) </h3>
 
 Mocks can be made serializable. With this feature you can use a mock in a place that requires dependencies to be serializable.
 <p>
 WARNING: This should be rarely used in unit testing. 
 </p><p>
 The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This
 was in a web environment and the objects from the external dependency were being serialized to pass between layers. 
 </p><p>
 To create serializable mock use <a href="http://docs.mockito.googlecode.com/hg/org/mockito/MockSettings.html#serializable()"><code>MockSettings.serializable()</code></a>:
 </p><pre>   List serializableMock = mock(List.class, withSettings().serializable());
 </pre>
 <p>
 The mock can be serialized assuming all the normal <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/io/Serializable.html">
 serialization requirements</a> are met by the class.
 </p><p>
 Making a real object spy serializable is a bit more effort as the spy(...) method does not have an overloaded version 
 which accepts MockSettings. No worries, you will hardly ever use it.
 
 </p><pre> List&lt;Object&gt; list = new ArrayList&lt;Object&gt;();
 List&lt;Object&gt; spy = mock(ArrayList.class, withSettings()
                 .spiedInstance(list)
                 .defaultAnswer(CALLS_REAL_METHODS)
                 .serializable());
 </pre>
 
 <h3 id="21">21. (**New**) New annotations: @Captor, @Spy, @InjectMocks (Since 1.8.3) </h3>
 <p>
 Release 1.8.3 brings new annotations that may be helpful on occasion:
 
 </p><ul>
 <li>@<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Captor.html" title="annotation in org.mockito"><code>Captor</code></a> simplifies creation of <a href="http://docs.mockito.googlecode.com/hg/org/mockito/ArgumentCaptor.html" title="class in org.mockito"><code>ArgumentCaptor</code></a> 
 - useful when the argument to capture is a nasty generic class and you want to avoid compiler warnings
 </li><li>@<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Spy.html" title="annotation in org.mockito"><code>Spy</code></a> - you can use it instead <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#spy(T)"><code>spy(Object)</code></a>. 
 </li><li>@<a href="http://docs.mockito.googlecode.com/hg/org/mockito/InjectMocks.html" title="annotation in org.mockito"><code>InjectMocks</code></a> - injects mocks into tested object automatically.
 </li></ul>
 <p>
 All new annotations are *only* processed on <a href="http://docs.mockito.googlecode.com/hg/org/mockito/MockitoAnnotations.html#initMocks(java.lang.Object)"><code>MockitoAnnotations.initMocks(Object)</code></a>
 </p><p>
 </p><h3 id="22">22. (**New**) Verification with timeout (Since 1.8.5)  </h3>
 <p>
 Allows verifying with timeout. May be useful for testing in concurrent conditions.
 </p><p>
 It feels this feature should be used rarely - figure out a better way of testing your multi-threaded system.
 </p><p>
 Not yet implemented to work with InOrder verification.
 </p><p>
 Examples:
 </p><p>
 </p><pre>   //passes when someMethod() is called within given time span 
   verify(mock, timeout(100)).someMethod();
   //above is an alias to:
   verify(mock, timeout(100).times(1)).someMethod();
   
   //passes when someMethod() is called *exactly* 2 times within given time span
   verify(mock, timeout(100).times(2)).someMethod();

   //passes when someMethod() is called *at lest* 2 times within given time span
   verify(mock, timeout(100).atLeast(2)).someMethod();
   
   //verifies someMethod() within given time span using given verification mode
   //useful only if you have your own custom verification modes.
   verify(mock, new Timeout(100, yourOwnVerificationMode)).someMethod();
 </pre>
<p>

</p><p>
</p><hr>

<p>
<!-- =========== FIELD SUMMARY =========== -->

<a name="field_summary"><!-- --></a>
</p><table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
<th align="left" colspan="2"><font size="+2">
<b>Field Summary</b></font></th>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing">Answer</a>&lt;java.lang.Object&gt;</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#CALLS_REAL_METHODS">CALLS_REAL_METHODS</a></b></code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Optional Answer to be used with <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class, org.mockito.stubbing.Answer)"><code>mock(Class, Answer)</code></a></td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing">Answer</a>&lt;java.lang.Object&gt;</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#RETURNS_DEEP_STUBS">RETURNS_DEEP_STUBS</a></b></code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Optional Answer to be used with <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class, org.mockito.stubbing.Answer)"><code>mock(Class, Answer)</code></a></td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing">Answer</a>&lt;java.lang.Object&gt;</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#RETURNS_DEFAULTS">RETURNS_DEFAULTS</a></b></code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The default Answer of every mock <b>if</b> the mock was not stubbed.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing">Answer</a>&lt;java.lang.Object&gt;</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#RETURNS_MOCKS">RETURNS_MOCKS</a></b></code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Optional Answer to be used with <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class, org.mockito.stubbing.Answer)"><code>mock(Class, Answer)</code></a></td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing">Answer</a>&lt;java.lang.Object&gt;</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#RETURNS_SMART_NULLS">RETURNS_SMART_NULLS</a></b></code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Optional Answer to be used with <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class, org.mockito.stubbing.Answer)"><code>mock(Class, Answer)</code></a></td>
</tr>
</tbody></table>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<a name="constructor_summary"><!-- --></a>
<table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
<th align="left" colspan="2"><font size="+2">
<b>Constructor Summary</b></font></th>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#Mockito()">Mockito</a></b>()</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
</tbody></table>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<a name="method_summary"><!-- --></a>
<table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
<th align="left" colspan="2"><font size="+2">
<b>Method Summary</b></font></th>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/verification/VerificationMode.html" title="interface in org.mockito.verification">VerificationMode</a></code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#atLeast(int)">atLeast</a></b>(int&nbsp;minNumberOfInvocations)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Allows at-least-x verification.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/verification/VerificationMode.html" title="interface in org.mockito.verification">VerificationMode</a></code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#atLeastOnce()">atLeastOnce</a></b>()</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Allows at-least-once verification.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/verification/VerificationMode.html" title="interface in org.mockito.verification">VerificationMode</a></code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#atMost(int)">atMost</a></b>(int&nbsp;maxNumberOfInvocations)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Allows at-most-x verification.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Stubber.html" title="interface in org.mockito.stubbing">Stubber</a></code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#doAnswer(org.mockito.stubbing.Answer)">doAnswer</a></b>(<a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing">Answer</a>&nbsp;answer)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use doAnswer() when you want to stub a void method with generic <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing"><code>Answer</code></a>.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Stubber.html" title="interface in org.mockito.stubbing">Stubber</a></code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#doCallRealMethod()">doCallRealMethod</a></b>()</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use doCallRealMethod() when you want to call the real implementation of a method.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Stubber.html" title="interface in org.mockito.stubbing">Stubber</a></code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#doNothing()">doNothing</a></b>()</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use doNothing() for setting void methods to do nothing.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Stubber.html" title="interface in org.mockito.stubbing">Stubber</a></code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#doReturn(java.lang.Object)">doReturn</a></b>(java.lang.Object&nbsp;toBeReturned)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use doReturn() in those rare occasions when you cannot use <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#when(T)"><code>when(Object)</code></a>.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Stubber.html" title="interface in org.mockito.stubbing">Stubber</a></code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#doThrow(java.lang.Throwable)">doThrow</a></b>(java.lang.Throwable&nbsp;toBeThrown)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use doThrow() when you want to stub the void method with an exception.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/InOrder.html" title="interface in org.mockito">InOrder</a></code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#inOrder(java.lang.Object...)">inOrder</a></b>(java.lang.Object...&nbsp;mocks)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates InOrder object that allows verifying mocks in order.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static
<table border="0" cellpadding="0" cellspacing="0" summary="">
<tbody><tr align="right" valign="">
<td nowrap=""><font size="-1">
<code>&lt;T&gt; T</code></font></td>
</tr>
</tbody></table>
</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class)">mock</a></b>(java.lang.Class&lt;T&gt;&nbsp;classToMock)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates mock object of given class or interface.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static
<table border="0" cellpadding="0" cellspacing="0" summary="">
<tbody><tr align="right" valign="">
<td nowrap=""><font size="-1">
<code>&lt;T&gt; T</code></font></td>
</tr>
</tbody></table>
</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class, org.mockito.stubbing.Answer)">mock</a></b>(java.lang.Class&lt;T&gt;&nbsp;classToMock,
     <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing">Answer</a>&nbsp;defaultAnswer)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates mock with a specified strategy for its answers to interactions.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static
<table border="0" cellpadding="0" cellspacing="0" summary="">
<tbody><tr align="right" valign="">
<td nowrap=""><font size="-1">
<code>&lt;T&gt; T</code></font></td>
</tr>
</tbody></table>
</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class, org.mockito.MockSettings)">mock</a></b>(java.lang.Class&lt;T&gt;&nbsp;classToMock,
     <a href="http://docs.mockito.googlecode.com/hg/org/mockito/MockSettings.html" title="interface in org.mockito">MockSettings</a>&nbsp;mockSettings)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a mock with some non-standard settings.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static
<table border="0" cellpadding="0" cellspacing="0" summary="">
<tbody><tr align="right" valign="">
<td nowrap=""><font size="-1">
<code>&lt;T&gt; T</code></font></td>
</tr>
</tbody></table>
</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class, org.mockito.ReturnValues)">mock</a></b>(java.lang.Class&lt;T&gt;&nbsp;classToMock,
     <a href="http://docs.mockito.googlecode.com/hg/org/mockito/ReturnValues.html" title="interface in org.mockito">ReturnValues</a>&nbsp;returnValues)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Deprecated.</b>&nbsp;<i><b>Please use mock(Foo.class, defaultAnswer);</b>
 <p>
 See <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class, org.mockito.stubbing.Answer)"><code>mock(Class, Answer)</code></a>
 </p><p>
 Why it is deprecated? ReturnValues is being replaced by Answer
 for better consistency &amp; interoperability of the framework. 
 Answer interface has been in Mockito for a while and it has the same responsibility as ReturnValues.
 There's no point in mainting exactly the same interfaces.
 </p><p>
 Creates mock with a specified strategy for its return values. 
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 </p><p>
 Obviously return values are used only when you don't stub the method call.

 </p><pre>   Foo mock = mock(Foo.class, Mockito.RETURNS_SMART_NULLS);
   Foo mockTwo = mock(Foo.class, new YourOwnReturnValues()); 
 </pre>
 
 <p>See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class</p></i></td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static
<table border="0" cellpadding="0" cellspacing="0" summary="">
<tbody><tr align="right" valign="">
<td nowrap=""><font size="-1">
<code>&lt;T&gt; T</code></font></td>
</tr>
</tbody></table>
</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class, java.lang.String)">mock</a></b>(java.lang.Class&lt;T&gt;&nbsp;classToMock,
     java.lang.String&nbsp;name)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specifies mock name.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/verification/VerificationMode.html" title="interface in org.mockito.verification">VerificationMode</a></code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#never()">never</a></b>()</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alias to times(0), see <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#times(int)"><code>times(int)</code></a></td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/verification/VerificationMode.html" title="interface in org.mockito.verification">VerificationMode</a></code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#only()">only</a></b>()</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Allows checking if given method was the only one invoked.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static
<table border="0" cellpadding="0" cellspacing="0" summary="">
<tbody><tr align="right" valign="">
<td nowrap=""><font size="-1">
<code>&lt;T&gt; void</code></font></td>
</tr>
</tbody></table>
</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#reset(T...)">reset</a></b>(T...&nbsp;mocks)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static
<table border="0" cellpadding="0" cellspacing="0" summary="">
<tbody><tr align="right" valign="">
<td nowrap=""><font size="-1">
<code>&lt;T&gt; T</code></font></td>
</tr>
</tbody></table>
</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#spy(T)">spy</a></b>(T&nbsp;object)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a spy of the real object.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static
<table border="0" cellpadding="0" cellspacing="0" summary="">
<tbody><tr align="right" valign="">
<td nowrap=""><font size="-1">
<code>&lt;T&gt; <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/DeprecatedOngoingStubbing.html" title="interface in org.mockito.stubbing">DeprecatedOngoingStubbing</a>&lt;T&gt;</code></font></td>
</tr>
</tbody></table>
</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#stub(T)">stub</a></b>(T&nbsp;methodCall)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stubs a method call with return value or an exception.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static
<table border="0" cellpadding="0" cellspacing="0" summary="">
<tbody><tr align="right" valign="">
<td nowrap=""><font size="-1">
<code>&lt;T&gt; <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/VoidMethodStubbable.html" title="interface in org.mockito.stubbing">VoidMethodStubbable</a>&lt;T&gt;</code></font></td>
</tr>
</tbody></table>
</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#stubVoid(T)">stubVoid</a></b>(T&nbsp;mock)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Deprecated.</b>&nbsp;<i>Use <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#doThrow(java.lang.Throwable)"><code>doThrow(Throwable)</code></a> method for stubbing voids</i></td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/verification/VerificationWithTimeout.html" title="interface in org.mockito.verification">VerificationWithTimeout</a></code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#timeout(int)">timeout</a></b>(int&nbsp;millis)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Allows verifying with timeout.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/verification/VerificationMode.html" title="interface in org.mockito.verification">VerificationMode</a></code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#times(int)">times</a></b>(int&nbsp;wantedNumberOfInvocations)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Allows verifying exact number of invocations.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;void</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#validateMockitoUsage()">validateMockitoUsage</a></b>()</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;First of all, in case of any trouble, I encourage you to read the Mockito FAQ: <a href="http://code.google.com/p/mockito/wiki/FAQ">http://code.google.com/p/mockito/wiki/FAQ</a></td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static
<table border="0" cellpadding="0" cellspacing="0" summary="">
<tbody><tr align="right" valign="">
<td nowrap=""><font size="-1">
<code>&lt;T&gt; T</code></font></td>
</tr>
</tbody></table>
</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#verify(T)">verify</a></b>(T&nbsp;mock)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Verifies certain behavior <b>happened once</b></td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static
<table border="0" cellpadding="0" cellspacing="0" summary="">
<tbody><tr align="right" valign="">
<td nowrap=""><font size="-1">
<code>&lt;T&gt; T</code></font></td>
</tr>
</tbody></table>
</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#verify(T, org.mockito.verification.VerificationMode)">verify</a></b>(T&nbsp;mock,
       <a href="http://docs.mockito.googlecode.com/hg/org/mockito/verification/VerificationMode.html" title="interface in org.mockito.verification">VerificationMode</a>&nbsp;mode)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Verifies certain behavior happened at least once / exact number of times / never.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;void</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#verifyNoMoreInteractions(java.lang.Object...)">verifyNoMoreInteractions</a></b>(java.lang.Object...&nbsp;mocks)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks if any of given mocks has any unverified interaction.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;void</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#verifyZeroInteractions(java.lang.Object...)">verifyZeroInteractions</a></b>(java.lang.Object...&nbsp;mocks)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Verifies that no interactions happened on given mocks.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static
<table border="0" cellpadding="0" cellspacing="0" summary="">
<tbody><tr align="right" valign="">
<td nowrap=""><font size="-1">
<code>&lt;T&gt; <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/OngoingStubbing.html" title="interface in org.mockito.stubbing">OngoingStubbing</a>&lt;T&gt;</code></font></td>
</tr>
</tbody></table>
</code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#when(T)">when</a></b>(T&nbsp;methodCall)</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enables stubbing methods.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size="-1">
<code>static&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/MockSettings.html" title="interface in org.mockito">MockSettings</a></code></font></td>
<td><code><b><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#withSettings()">withSettings</a></b>()</code>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Allows mock creation with additional mock settings.</td>
</tr>
</tbody></table>
&nbsp;<a name="methods_inherited_from_class_org.mockito.Matchers"><!-- --></a>
<table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
<tbody><tr bgcolor="#EEEEFF" class="TableSubHeadingColor">
<th align="left"><b>Methods inherited from class org.mockito.<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html" title="class in org.mockito">Matchers</a></b></th>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td><code><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#any()">any</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#any(java.lang.Class)">any</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anyBoolean()">anyBoolean</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anyByte()">anyByte</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anyChar()">anyChar</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anyCollection()">anyCollection</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anyCollectionOf(java.lang.Class)">anyCollectionOf</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anyDouble()">anyDouble</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anyFloat()">anyFloat</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anyInt()">anyInt</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anyList()">anyList</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anyListOf(java.lang.Class)">anyListOf</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anyLong()">anyLong</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anyMap()">anyMap</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anyObject()">anyObject</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anySet()">anySet</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anySetOf(java.lang.Class)">anySetOf</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anyShort()">anyShort</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anyString()">anyString</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#anyVararg()">anyVararg</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#argThat(org.hamcrest.Matcher)">argThat</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#booleanThat(org.hamcrest.Matcher)">booleanThat</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#byteThat(org.hamcrest.Matcher)">byteThat</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#charThat(org.hamcrest.Matcher)">charThat</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#contains(java.lang.String)">contains</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#doubleThat(org.hamcrest.Matcher)">doubleThat</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#endsWith(java.lang.String)">endsWith</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#eq(boolean)">eq</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#eq(byte)">eq</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#eq(char)">eq</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#eq(double)">eq</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#eq(float)">eq</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#eq(int)">eq</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#eq(long)">eq</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#eq(short)">eq</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#eq(T)">eq</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#floatThat(org.hamcrest.Matcher)">floatThat</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#intThat(org.hamcrest.Matcher)">intThat</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#isA(java.lang.Class)">isA</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#isNotNull()">isNotNull</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#isNull()">isNull</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#longThat(org.hamcrest.Matcher)">longThat</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#matches(java.lang.String)">matches</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#notNull()">notNull</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#refEq(T, java.lang.String...)">refEq</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#same(T)">same</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#shortThat(org.hamcrest.Matcher)">shortThat</a>, <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Matchers.html#startsWith(java.lang.String)">startsWith</a></code></td>
</tr>
</tbody></table>
&nbsp;<a name="methods_inherited_from_class_java.lang.Object"><!-- --></a>
<table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
<tbody><tr bgcolor="#EEEEFF" class="TableSubHeadingColor">
<th align="left"><b>Methods inherited from class java.lang.Object</b></th>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td><code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></td>
</tr>
</tbody></table>
&nbsp;
<p>

<!-- ============ FIELD DETAIL =========== -->

<a name="field_detail"><!-- --></a>
</p><table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
<th align="left" colspan="1"><font size="+2">
<b>Field Detail</b></font></th>
</tr>
</tbody></table>

<a name="RETURNS_DEFAULTS"><!-- --></a><h3>
RETURNS_DEFAULTS</h3>
<pre>public static final <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing">Answer</a>&lt;java.lang.Object&gt; <b>RETURNS_DEFAULTS</b></pre>
<dl>
<dd>The default Answer of every mock <b>if</b> the mock was not stubbed. 
 Typically it just returns some empty value. 
 <p>
 <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing"><code>Answer</code></a> can be used to define the return values of unstubbed invocations. 
 </p><p>
 This implementation first tries the global configuration. 
 If there is no global configuration then it uses <a href="http://docs.mockito.googlecode.com/hg/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.html" title="class in org.mockito.internal.stubbing.defaultanswers"><code>ReturnsEmptyValues</code></a> (returns zeros, empty collections, nulls, etc.)
</p><p>
</p><dl>
</dl>
</dd></dl>
<hr>

<a name="RETURNS_SMART_NULLS"><!-- --></a><h3>
RETURNS_SMART_NULLS</h3>
<pre>public static final <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing">Answer</a>&lt;java.lang.Object&gt; <b>RETURNS_SMART_NULLS</b></pre>
<dl>
<dd>Optional Answer to be used with <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class, org.mockito.stubbing.Answer)"><code>mock(Class, Answer)</code></a>
 <p>
 <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing"><code>Answer</code></a> can be used to define the return values of unstubbed invocations.
 </p><p>
 This implementation can be helpful when working with legacy code.
 Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
 This implementation of Answer <b>returns SmartNull instead of null</b>.
 SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.
 </p><p>
 ReturnsSmartNulls first tries to return ordinary return values (see <a href="http://docs.mockito.googlecode.com/hg/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.html" title="class in org.mockito.internal.stubbing.defaultanswers"><code>ReturnsMoreEmptyValues</code></a>)
 then it tries to return SmartNull. If the return type is final then plain null is returned.
 </p><p>
 ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0
 </p><p>
 Example:
 </p><pre>   Foo mock = (Foo.class, RETURNS_SMART_NULLS);
   
   //calling unstubbed method here:
   Stuff stuff = mock.getStuff();
   
   //using object returned by unstubbed call:
   stuff.doSomething();
   
   //Above doesn't yield NullPointerException this time!
   //Instead, SmartNullPointerException is thrown. 
   //Exception's cause links to unstubbed <i>mock.getStuff()</i> - just click on the stack trace.  
 </pre>
<p>
</p><dl>
</dl>
</dd></dl>
<hr>

<a name="RETURNS_MOCKS"><!-- --></a><h3>
RETURNS_MOCKS</h3>
<pre>public static final <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing">Answer</a>&lt;java.lang.Object&gt; <b>RETURNS_MOCKS</b></pre>
<dl>
<dd>Optional Answer to be used with <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class, org.mockito.stubbing.Answer)"><code>mock(Class, Answer)</code></a>
 <p>
 <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing"><code>Answer</code></a> can be used to define the return values of unstubbed invocations.
 </p><p>
 This implementation can be helpful when working with legacy code. 
 </p><p>
 ReturnsMocks first tries to return ordinary return values (see <a href="http://docs.mockito.googlecode.com/hg/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.html" title="class in org.mockito.internal.stubbing.defaultanswers"><code>ReturnsMoreEmptyValues</code></a>)
 then it tries to return mocks. If the return type cannot be mocked (e.g. is final) then plain null is returned.
 </p><p>
</p><p>
</p><dl>
</dl>
</dd></dl>
<hr>

<a name="RETURNS_DEEP_STUBS"><!-- --></a><h3>
RETURNS_DEEP_STUBS</h3>
<pre>public static final <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing">Answer</a>&lt;java.lang.Object&gt; <b>RETURNS_DEEP_STUBS</b></pre>
<dl>
<dd>Optional Answer to be used with <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class, org.mockito.stubbing.Answer)"><code>mock(Class, Answer)</code></a>
 <p>
 Example that shows how deep stub works:
 </p><pre>   Foo mock = mock(Foo.class, RETURNS_DEEP_STUBS);

   // note that we're stubbing a chain of methods here: getBar().getName()
   when(mock.getBar().getName()).thenReturn("deep");

   // note that we're chaining method calls: getBar().getName()
   assertEquals("deep", mock.getBar().getName());
 </pre>
 
 <strong>Verification API does not support 'chaining'</strong> so deep stub doesn't change how you do verification.
 <p>
 <strong>WARNING: </strong>
 This feature should rarely be required for regular clean code! Leave it for legacy code.
 Mocking a mock to return a mock, to return a mock, (...), to return something meaningful
 hints at violation of Law of Demeter or mocking a value object (a well known anti-pattern).
 </p><p>
 Good quote I've seen one day on the web: <strong>every time a mock returns a mock a fairy dies</strong>. 
 </p><p>
 How deep stub work internally?
 </p><pre>   //this:
   Foo mock = mock(Foo.class, RETURNS_DEEP_STUBS);
   when(mock.getBar().getName(), "deep");

   //is equivalent of
   Foo foo = mock(Foo.class);
   Bar bar = mock(Bar.class);
   when(foo.getBar()).thenReturn(bar);
   when(bar.getName()).thenReturn("deep");
 </pre>
 <p>
 This feature will not work when any return type of methods included in the chain cannot be mocked
 (for example: is a primitive or a final class). This is because of java type system.
</p><p>
</p><dl>
</dl>
</dd></dl>
<hr>

<a name="CALLS_REAL_METHODS"><!-- --></a><h3>
CALLS_REAL_METHODS</h3>
<pre>public static final <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing">Answer</a>&lt;java.lang.Object&gt; <b>CALLS_REAL_METHODS</b></pre>
<dl>
<dd>Optional Answer to be used with <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class, org.mockito.stubbing.Answer)"><code>mock(Class, Answer)</code></a>
 <p>
 <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing"><code>Answer</code></a> can be used to define the return values of unstubbed invocations.
 </p><p>
 This implementation can be helpful when working with legacy code.
 When this implementation is used, unstubbed methods will delegate to the real implementation.
 This is a way to create a partial mock object that calls real methods by default.
 </p><p>
 As usual you are going to read <b>the partial mock warning</b>:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't... 
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 </p><p>
 However, there are rare cases when partial mocks come handy: 
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven &amp; well-designed code.
 </p><p>
 Example:
 </p><pre> Foo mock = mock(Foo.class, CALLS_REAL_METHODS);

 // this calls the real implementation of Foo.getSomething()
 value = mock.getSomething();

 when(mock.getSomething()).thenReturn(fakeValue);

 // now fakeValue is returned
 value = mock.getSomething();
 </pre>
<p>
</p><dl>
</dl>
</dd></dl>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<a name="constructor_detail"><!-- --></a>
<table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
<th align="left" colspan="1"><font size="+2">
<b>Constructor Detail</b></font></th>
</tr>
</tbody></table>

<a name="Mockito()"><!-- --></a><h3>
Mockito</h3>
<pre>public <b>Mockito</b>()</pre>
<dl>
</dl>

<!-- ============ METHOD DETAIL ========== -->

<a name="method_detail"><!-- --></a>
<table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
<th align="left" colspan="1"><font size="+2">
<b>Method Detail</b></font></th>
</tr>
</tbody></table>

<a name="mock(java.lang.Class)"><!-- --></a><h3>
mock</h3>
<pre>public static &lt;T&gt; T <b>mock</b>(java.lang.Class&lt;T&gt;&nbsp;classToMock)</pre>
<dl>
<dd>Creates mock object of given class or interface.
 <p>
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
</p><p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>classToMock</code> - class or interface to mock
</dd><dt><b>Returns:</b></dt><dd>mock object</dd></dl>
</dd>
</dl>
<hr>

<a name="mock(java.lang.Class, java.lang.String)"><!-- --></a><h3>
mock</h3>
<pre>public static &lt;T&gt; T <b>mock</b>(java.lang.Class&lt;T&gt;&nbsp;classToMock,
                         java.lang.String&nbsp;name)</pre>
<dl>
<dd>Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors. 
 <p>
 Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators. 
 <b>If you have too many mocks then refactor the code</b> so that it's easy to test/debug without necessity of naming mocks.
 </p><p>
 <b>If you use @Mock annotation then you've got naming mocks for free!</b> @Mock uses field name as mock name. <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mock.html" title="annotation in org.mockito"><code>Read more.</code></a>
 </p><p>
 
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
</p><p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>classToMock</code> - class or interface to mock</dd><dd><code>name</code> - of the mock
</dd><dt><b>Returns:</b></dt><dd>mock object</dd></dl>
</dd>
</dl>
<hr>

<a name="mock(java.lang.Class, org.mockito.ReturnValues)"><!-- --></a><h3>
mock</h3>
<pre><font size="-1">@Deprecated
</font>public static &lt;T&gt; T <b>mock</b>(java.lang.Class&lt;T&gt;&nbsp;classToMock,
                                    <a href="http://docs.mockito.googlecode.com/hg/org/mockito/ReturnValues.html" title="interface in org.mockito">ReturnValues</a>&nbsp;returnValues)</pre>
<dl>
<dd><b>Deprecated.</b>&nbsp;<i><b>Please use mock(Foo.class, defaultAnswer);</b>
 <p>
 See <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class, org.mockito.stubbing.Answer)"><code>mock(Class, Answer)</code></a>
 </p><p>
 Why it is deprecated? ReturnValues is being replaced by Answer
 for better consistency &amp; interoperability of the framework. 
 Answer interface has been in Mockito for a while and it has the same responsibility as ReturnValues.
 There's no point in mainting exactly the same interfaces.
 </p><p>
 Creates mock with a specified strategy for its return values. 
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 </p><p>
 Obviously return values are used only when you don't stub the method call.

 </p><pre>   Foo mock = mock(Foo.class, Mockito.RETURNS_SMART_NULLS);
   Foo mockTwo = mock(Foo.class, new YourOwnReturnValues()); 
 </pre>
 
 <p>See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class</p></i>
<p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>classToMock</code> - class or interface to mock</dd><dd><code>returnValues</code> - default return values for unstubbed methods
</dd><dt><b>Returns:</b></dt><dd>mock object</dd></dl>
</dd>
</dl>
<hr>

<a name="mock(java.lang.Class, org.mockito.stubbing.Answer)"><!-- --></a><h3>
mock</h3>
<pre>public static &lt;T&gt; T <b>mock</b>(java.lang.Class&lt;T&gt;&nbsp;classToMock,
                         <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing">Answer</a>&nbsp;defaultAnswer)</pre>
<dl>
<dd>Creates mock with a specified strategy for its answers to interactions. 
 It's quite advanced feature and typically you don't need it to write decent tests.
 However it can be helpful when working with legacy systems.
 <p>
 It is the default answer so it will be used <b>only when you don't</b> stub the method call.

 </p><pre>   Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
   Foo mockTwo = mock(Foo.class, new YourOwnAnswer()); 
 </pre>
 
 <p>See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class</p>
<p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>classToMock</code> - class or interface to mock</dd><dd><code>defaultAnswer</code> - default answer for unstubbed methods
</dd><dt><b>Returns:</b></dt><dd>mock object</dd></dl>
</dd>
</dl>
<hr>

<a name="mock(java.lang.Class, org.mockito.MockSettings)"><!-- --></a><h3>
mock</h3>
<pre>public static &lt;T&gt; T <b>mock</b>(java.lang.Class&lt;T&gt;&nbsp;classToMock,
                         <a href="http://docs.mockito.googlecode.com/hg/org/mockito/MockSettings.html" title="interface in org.mockito">MockSettings</a>&nbsp;mockSettings)</pre>
<dl>
<dd>Creates a mock with some non-standard settings.
 <p>
 The number of configuration points for a mock grows 
 so we need a fluent way to introduce new configuration without adding more and more overloaded Mockito.mock() methods. 
 Hence <a href="http://docs.mockito.googlecode.com/hg/org/mockito/MockSettings.html" title="interface in org.mockito"><code>MockSettings</code></a>.
 </p><pre>   Listener mock = mock(Listener.class, withSettings()
     .name("firstListner").defaultBehavior(RETURNS_SMART_NULLS));
   );  
 </pre>
 <b>Use it carefully and occasionally</b>. What might be reason your test needs non-standard mocks? 
 Is the code under test so complicated that it requires non-standard mocks? 
 Wouldn't you prefer to refactor the code under test so it is testable in a simple way?
 <p>
 See also <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#withSettings()"><code>withSettings()</code></a>
 </p><p>
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
</p><p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>classToMock</code> - class or interface to mock</dd><dd><code>mockSettings</code> - additional mock settings
</dd><dt><b>Returns:</b></dt><dd>mock object</dd></dl>
</dd>
</dl>
<hr>

<a name="spy(java.lang.Object)"><!-- --></a><a name="spy(T)"><!-- --></a><h3>
spy</h3>
<pre>public static &lt;T&gt; T <b>spy</b>(T&nbsp;object)</pre>
<dl>
<dd>Creates a spy of the real object. The spy calls <b>real</b> methods unless they are stubbed.
 <p>
 Real spies should be used <b>carefully and occasionally</b>, for example when dealing with legacy code.
 </p><p>
 As usual you are going to read <b>the partial mock warning</b>:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't... 
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 </p><p>
 However, there are rare cases when partial mocks come handy: 
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven &amp; well-designed code.
 </p><p>
 Example:
 
 </p><pre>   List list = new LinkedList();
   List spy = spy(list);
 
   //optionally, you can stub out some methods:
   when(spy.size()).thenReturn(100);
 
   //using the spy calls <b>real</b> methods
   spy.add("one");
   spy.add("two");
 
   //prints "one" - the first element of a list
   System.out.println(spy.get(0));
 
   //size() method was stubbed - 100 is printed
   System.out.println(spy.size());
 
   //optionally, you can verify
   verify(spy).add("one");
   verify(spy).add("two");
 </pre>
 
 <h4>Important gotcha on spying real objects!</h4>
 
 1. Sometimes it's impossible to use <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#when(T)"><code>when(Object)</code></a> for stubbing spies. Example:
 
 <pre>   List list = new LinkedList();
   List spy = spy(list);
   
   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)
   when(spy.get(0)).thenReturn("foo");
   
   //You have to use doReturn() for stubbing
   doReturn("foo").when(spy).get(0);
 </pre>
 
 2. Watch out for final methods. 
 Mockito doesn't mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method = trouble.
 What will happen is the real method will be called *on mock* but *not on the real instance* you passed to the spy() method.
 Typically you may get a NullPointerException because mock instances don't have fields initiated.
 
 <p>
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
</p><p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>object</code> - to spy on
</dd><dt><b>Returns:</b></dt><dd>a spy of the real object</dd></dl>
</dd>
</dl>
<hr>

<a name="stub(java.lang.Object)"><!-- --></a><a name="stub(T)"><!-- --></a><h3>
stub</h3>
<pre>public static &lt;T&gt; <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/DeprecatedOngoingStubbing.html" title="interface in org.mockito.stubbing">DeprecatedOngoingStubbing</a>&lt;T&gt; <b>stub</b>(T&nbsp;methodCall)</pre>
<dl>
<dd>Stubs a method call with return value or an exception. E.g:

 <pre> stub(mock.someMethod()).toReturn(10);

 //you can use flexible argument matchers, e.g:
 stub(mock.someMethod(<b>anyString()</b>)).toReturn(10);

 //setting exception to be thrown:
 stub(mock.someMethod("some arg")).toThrow(new RuntimeException());

 //you can stub with different behavior for consecutive method calls.
 //Last stubbing (e.g: toReturn("foo")) determines the behavior for further consecutive calls.
 stub(mock.someMethod("some arg"))
  .toThrow(new RuntimeException())
  .toReturn("foo");
 </pre>
 <p>
 Some users find stub() confusing therefore <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#when(T)"><code>when(Object)</code></a> is recommended over stub()
 </p><pre>   //Instead of:
   stub(mock.count()).toReturn(10);
 
   //You can do:
   when(mock.count()).thenReturn(10);
 </pre> 
 For stubbing void methods with throwables see: <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#doThrow(java.lang.Throwable)"><code>doThrow(Throwable)</code></a>
 <p>
 Stubbing can be overridden: for example common stubbing can go to fixture
 setup but the test methods can override it.
 Please note that overridding stubbing is a potential code smell that points out too much stubbing.
 </p><p>
 Once stubbed, the method will always return stubbed value regardless
 of how many times it is called.
 </p><p>
 Last stubbing is more important - when you stubbed the same method with
 the same arguments many times.
 </p><p>
 Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>.
 Let's say you've stubbed foo.bar(). 
 If your code cares what foo.bar() returns then something else breaks(often before even verify() gets executed).
 If your code doesn't care what get(0) returns then it should not be stubbed. 
 Not convinced? See <a href="http://monkeyisland.pl/2008/04/26/asking-and-telling">here</a>.
</p><p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>methodCall</code> - method call
</dd><dt><b>Returns:</b></dt><dd>DeprecatedOngoingStubbing object to set stubbed value/exception</dd></dl>
</dd>
</dl>
<hr>

<a name="when(java.lang.Object)"><!-- --></a><a name="when(T)"><!-- --></a><h3>
when</h3>
<pre>public static &lt;T&gt; <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/OngoingStubbing.html" title="interface in org.mockito.stubbing">OngoingStubbing</a>&lt;T&gt; <b>when</b>(T&nbsp;methodCall)</pre>
<dl>
<dd>Enables stubbing methods. Use it when you want the mock to return particular value when particular method is called. 
 <p>
 Simply put: "<b>When</b> the x method is called <b>then</b> return y".
 </p><p>
 <b>when() is a successor of deprecated <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#stub(T)"><code>stub(Object)</code></a></b>
 </p><p>
 Examples:
 
 </p><pre> <b>when</b>(mock.someMethod()).<b>thenReturn</b>(10);

 //you can use flexible argument matchers, e.g:
 when(mock.someMethod(<b>anyString()</b>)).thenReturn(10);

 //setting exception to be thrown:
 when(mock.someMethod("some arg")).thenThrow(new RuntimeException());

 //you can set different behavior for consecutive method calls.
 //Last stubbing (e.g: thenReturn("foo")) determines the behavior of further consecutive calls.
 when(mock.someMethod("some arg"))
  .thenThrow(new RuntimeException())
  .thenReturn("foo");
  
 //Alternative, shorter version for consecutive stubbing:
 when(mock.someMethod("some arg"))
  .thenReturn("one", "two");
 //is the same as:
 when(mock.someMethod("some arg"))
  .thenReturn("one")
  .thenReturn("two");

 //shorter version for consecutive method calls throwing exceptions:
 when(mock.someMethod("some arg"))
  .thenThrow(new RuntimeException(), new NullPointerException();
   
 </pre>
 
 For stubbing void methods with throwables see: <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#doThrow(java.lang.Throwable)"><code>doThrow(Throwable)</code></a>
 <p>
 Stubbing can be overridden: for example common stubbing can go to fixture
 setup but the test methods can override it.
 Please note that overridding stubbing is a potential code smell that points out too much stubbing.
 </p><p>
 Once stubbed, the method will always return stubbed value regardless
 of how many times it is called.
 </p><p>
 Last stubbing is more important - when you stubbed the same method with
 the same arguments many times.
 </p><p>
 Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>.
 Let's say you've stubbed foo.bar(). 
 If your code cares what foo.bar() returns then something else breaks(often before even verify() gets executed).
 If your code doesn't care what get(0) returns then it should not be stubbed. 
 Not convinced? See <a href="http://monkeyisland.pl/2008/04/26/asking-and-telling">here</a>.
 
 </p><p>
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
</p><p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>methodCall</code> - method to be stubbed</dd></dl>
</dd>
</dl>
<hr>

<a name="verify(java.lang.Object)"><!-- --></a><a name="verify(T)"><!-- --></a><h3>
verify</h3>
<pre>public static &lt;T&gt; T <b>verify</b>(T&nbsp;mock)</pre>
<dl>
<dd>Verifies certain behavior <b>happened once</b> 
 <p>
 Alias to <code>verify(mock, times(1))</code> E.g:
 </p><pre>   verify(mock).someMethod("some arg");
 </pre>
 Above is equivalent to:
 <pre>   verify(mock, times(1)).someMethod("some arg");
 </pre>
 <p>
 Arguments passed are compared using equals() method.
 Read about <a href="http://docs.mockito.googlecode.com/hg/org/mockito/ArgumentCaptor.html" title="class in org.mockito"><code>ArgumentCaptor</code></a> or <a href="http://docs.mockito.googlecode.com/hg/org/mockito/ArgumentMatcher.html" title="class in org.mockito"><code>ArgumentMatcher</code></a> to find out other ways of matching / asserting arguments passed.
 </p><p>
 Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>.
 Let's say you've stubbed foo.bar(). 
 If your code cares what foo.bar() returns then something else breaks(often before even verify() gets executed).
 If your code doesn't care what get(0) returns then it should not be stubbed. 
 Not convinced? See <a href="http://monkeyisland.pl/2008/04/26/asking-and-telling">here</a>.
 
 </p><p>
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
</p><p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>mock</code> - to be verified
</dd><dt><b>Returns:</b></dt><dd>mock object itself</dd></dl>
</dd>
</dl>
<hr>

<a name="verify(java.lang.Object,org.mockito.verification.VerificationMode)"><!-- --></a><a name="verify(T, org.mockito.verification.VerificationMode)"><!-- --></a><h3>
verify</h3>
<pre>public static &lt;T&gt; T <b>verify</b>(T&nbsp;mock,
                           <a href="http://docs.mockito.googlecode.com/hg/org/mockito/verification/VerificationMode.html" title="interface in org.mockito.verification">VerificationMode</a>&nbsp;mode)</pre>
<dl>
<dd>Verifies certain behavior happened at least once / exact number of times / never. E.g:
 <pre>   verify(mock, times(5)).someMethod("was called five times");

   verify(mock, atLeast(2)).someMethod("was called at least two times");

   //you can use flexible argument matchers, e.g:
   verify(mock, atLeastOnce()).someMethod(<b>anyString()</b>);
 </pre>

 <b>times(1) is the default</b> and can be omitted
 <p>
 Arguments passed are compared using equals() method.
 Read about <a href="http://docs.mockito.googlecode.com/hg/org/mockito/ArgumentCaptor.html" title="class in org.mockito"><code>ArgumentCaptor</code></a> or <a href="http://docs.mockito.googlecode.com/hg/org/mockito/ArgumentMatcher.html" title="class in org.mockito"><code>ArgumentMatcher</code></a> to find out other ways of matching / asserting arguments passed.
 </p><p>
</p><p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>mock</code> - to be verified</dd><dd><code>mode</code> - times(x), atLeastOnce() or never()
</dd><dt><b>Returns:</b></dt><dd>mock object itself</dd></dl>
</dd>
</dl>
<hr>

<a name="reset(java.lang.Object)"><!-- --></a><a name="reset(T...)"><!-- --></a><h3>
reset</h3>
<pre>public static &lt;T&gt; void <b>reset</b>(T...&nbsp;mocks)</pre>
<dl>
<dd>Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.
 Normally, you don't need to reset your mocks, just create new mocks for each test method.
 <p>
 Instead of reset() please consider writing simple, small and focused test methods over lengthy, over-specified tests.
 <b>First potential code smell is reset() in the middle of the test method.</b> This probably means you're testing too much.
 Follow the whisper of your test methods: "Please keep us small &amp; focused on single behavior".
 There are several threads about it on mockito mailing list.
 </p><p>
 The only reason we added reset() method is to
 make it possible to work with container-injected mocks.
 See issue 55 (<a href="http://code.google.com/p/mockito/issues/detail?id=55">here</a>)
 or FAQ (<a href="http://code.google.com/p/mockito/wiki/FAQ">here</a>).
 </p><p>
 <b>Don't harm yourself.</b> reset() in the middle of the test method is a code smell (you're probably testing too much).
 </p><pre>   List mock = mock(List.class);
   when(mock.size()).thenReturn(10);
   mock.add(1);

   reset(mock);
   //at this point the mock forgot any interactions &amp; stubbing
 </pre>
<p>
</p></dd><dd><dl>
<dt><b>Type Parameters:</b></dt><dd><code>T</code> - </dd><dt><b>Parameters:</b></dt><dd><code>mocks</code> - to be reset</dd></dl>
</dd>
</dl>
<hr>

<a name="verifyNoMoreInteractions(java.lang.Object...)"><!-- --></a><h3>
verifyNoMoreInteractions</h3>
<pre>public static void <b>verifyNoMoreInteractions</b>(java.lang.Object...&nbsp;mocks)</pre>
<dl>
<dd>Checks if any of given mocks has any unverified interaction.
 <p>
 You can use this method after you verified your mocks - to make sure that nothing
 else was invoked on your mocks.
 </p><p>
 See also <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#never()"><code>never()</code></a> - it is more explicit and communicates the intent well.
 </p><p>
 Stubbed invocations (if called) are also treated as interactions.
 </p><p>
 A word of <b>warning</b>: 
 Some users who did a lot of classic, expect-run-verify mocking tend to use verifyNoMoreInteractions() very often, even in every test method. 
 verifyNoMoreInteractions() is not recommended to use in every test method. 
 verifyNoMoreInteractions() is a handy assertion from the interaction testing toolkit. Use it only when it's relevant.
 Abusing it leads to overspecified, less maintainable tests. You can find further reading 
 <a href="http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/">here</a>.
 </p><p>
 This method will also detect unverified invocations that occurred before the test method,
 for example: in setUp(), @Before method or in constructor.
 Consider writing nice code that makes interactions only in test methods.
 
 </p><p>
 Example:
 
 </p><pre> //interactions
 mock.doSomething();
 mock.doSomethingUnexpected();
 
 //verification
 verify(mock).doSomething();
 
 //following will fail because 'doSomethingUnexpected()' is unexpected
 verifyNoMoreInteractions(mock);
 
 </pre>
 
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
<p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>mocks</code> - to be verified</dd></dl>
</dd>
</dl>
<hr>

<a name="verifyZeroInteractions(java.lang.Object...)"><!-- --></a><h3>
verifyZeroInteractions</h3>
<pre>public static void <b>verifyZeroInteractions</b>(java.lang.Object...&nbsp;mocks)</pre>
<dl>
<dd>Verifies that no interactions happened on given mocks.
 <pre>   verifyZeroInteractions(mockOne, mockTwo);
 </pre>
 This method will also detect invocations 
 that occurred before the test method, for example: in setUp(), @Before method or in constructor.
 Consider writing nice code that makes interactions only in test methods.  
 <p>
 See also <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#never()"><code>never()</code></a> - it is more explicit and communicates the intent well.
 </p><p>
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
</p><p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>mocks</code> - to be verified</dd></dl>
</dd>
</dl>
<hr>

<a name="stubVoid(java.lang.Object)"><!-- --></a><a name="stubVoid(T)"><!-- --></a><h3>
stubVoid</h3>
<pre>public static &lt;T&gt; <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/VoidMethodStubbable.html" title="interface in org.mockito.stubbing">VoidMethodStubbable</a>&lt;T&gt; <b>stubVoid</b>(T&nbsp;mock)</pre>
<dl>
<dd><b>Deprecated.</b>&nbsp;<i>Use <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#doThrow(java.lang.Throwable)"><code>doThrow(Throwable)</code></a> method for stubbing voids</i>
<p>
</p></dd><dd><pre>   //Instead of:
   stubVoid(mock).toThrow(e).on().someVoidMethod();
 
   //Please do:
   doThrow(e).when(mock).someVoidMethod();
 </pre> 
 
 doThrow() replaces stubVoid() because of improved readability and consistency with the family of doAnswer() methods. 
 <p>
 Originally, stubVoid() was used for stubbing void methods with exceptions. E.g:
 
 </p><pre> stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();
 
 //you can stub with different behavior for consecutive calls.
 //Last stubbing (e.g. toReturn()) determines the behavior for further consecutive calls.   
 stubVoid(mock)
   .toThrow(new RuntimeException())
   .toReturn()
   .on().someMethod();
 </pre>
 
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
<p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>mock</code> - to stub
</dd><dt><b>Returns:</b></dt><dd>stubbable object that allows stubbing with throwable</dd></dl>
</dd>
</dl>
<hr>

<a name="doThrow(java.lang.Throwable)"><!-- --></a><h3>
doThrow</h3>
<pre>public static <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Stubber.html" title="interface in org.mockito.stubbing">Stubber</a> <b>doThrow</b>(java.lang.Throwable&nbsp;toBeThrown)</pre>
<dl>
<dd>Use doThrow() when you want to stub the void method with an exception.
 <p>
 Stubbing voids requires different approach from <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#when(T)"><code>when(Object)</code></a> because the compiler does not like void methods inside brackets...
 </p><p>
 Example:
 
 </p><pre>   doThrow(new RuntimeException()).when(mock).someVoidMethod();
 </pre>
<p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>toBeThrown</code> - to be thrown when the stubbed method is called
</dd><dt><b>Returns:</b></dt><dd>stubber - to select a method for stubbing</dd></dl>
</dd>
</dl>
<hr>

<a name="doCallRealMethod()"><!-- --></a><h3>
doCallRealMethod</h3>
<pre>public static <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Stubber.html" title="interface in org.mockito.stubbing">Stubber</a> <b>doCallRealMethod</b>()</pre>
<dl>
<dd>Use doCallRealMethod() when you want to call the real implementation of a method.
 <p>
 As usual you are going to read <b>the partial mock warning</b>:
 Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 How does partial mock fit into this paradigm? Well, it just doesn't... 
 Partial mock usually means that the complexity has been moved to a different method on the same object.
 In most cases, this is not the way you want to design your application.
 </p><p>
 However, there are rare cases when partial mocks come handy: 
 dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 However, I wouldn't use partial mocks for new, test-driven &amp; well-designed code.
 </p><p>
 See also javadoc <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#spy(T)"><code>spy(Object)</code></a> to find out more about partial mocks. 
 <b>Mockito.spy() is a recommended way of creating partial mocks.</b> 
 The reason is it guarantees real methods are called against correctly constructed object because you're responsible for constructing the object passed to spy() method.
 </p><p>
 Example:
 </p><pre>   Foo mock = mock(Foo.class);
   doCallRealMethod().when(mock).someVoidMethod();

   // this will call the real implementation of Foo.someVoidMethod()
   mock.someVoidMethod();
 </pre>
 <p>
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
</p><p>
</p></dd><dd><dl>

<dt><b>Returns:</b></dt><dd>stubber - to select a method for stubbing</dd></dl>
</dd>
</dl>
<hr>

<a name="doAnswer(org.mockito.stubbing.Answer)"><!-- --></a><h3>
doAnswer</h3>
<pre>public static <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Stubber.html" title="interface in org.mockito.stubbing">Stubber</a> <b>doAnswer</b>(<a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing">Answer</a>&nbsp;answer)</pre>
<dl>
<dd>Use doAnswer() when you want to stub a void method with generic <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Answer.html" title="interface in org.mockito.stubbing"><code>Answer</code></a>.
 <p>
 Stubbing voids requires different approach from <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#when(T)"><code>when(Object)</code></a> because the compiler does not like void methods inside brackets...
 </p><p>
 Example:
 
 </p><pre>  doAnswer(new Answer() {
      public Object answer(InvocationOnMock invocation) {
          Object[] args = invocation.getArguments();
          Mock mock = invocation.getMock();
          return null;
      }})
  .when(mock).someMethod();
 </pre>
 <p>
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
</p><p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>answer</code> - to answer when the stubbed method is called
</dd><dt><b>Returns:</b></dt><dd>stubber - to select a method for stubbing</dd></dl>
</dd>
</dl>
<hr>

<a name="doNothing()"><!-- --></a><h3>
doNothing</h3>
<pre>public static <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Stubber.html" title="interface in org.mockito.stubbing">Stubber</a> <b>doNothing</b>()</pre>
<dl>
<dd>Use doNothing() for setting void methods to do nothing. <b>Beware that void methods on mocks do nothing by default!</b> 
 However, there are rare situations when doNothing() comes handy:  
 <p>
 1. Stubbing consecutive calls on a void method:
 </p><pre>   doNothing().
   doThrow(new RuntimeException())
   .when(mock).someVoidMethod();
   
   //does nothing the first time:
   mock.someVoidMethod();
   
   //throws RuntimeException the next time:
   mock.someVoidMethod();
 </pre>
 
 2. When you spy real objects and you want the void method to do nothing:
 <pre>   List list = new LinkedList();
   List spy = spy(list);
   
   //let's make clear() do nothing
   doNothing().when(spy).clear();
   
   spy.add("one");
   
   //clear() does nothing, so the list still contains "one"
   spy.clear();
 </pre>
 <p>
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
</p><p>
</p></dd><dd><dl>

<dt><b>Returns:</b></dt><dd>stubber - to select a method for stubbing</dd></dl>
</dd>
</dl>
<hr>

<a name="doReturn(java.lang.Object)"><!-- --></a><h3>
doReturn</h3>
<pre>public static <a href="http://docs.mockito.googlecode.com/hg/org/mockito/stubbing/Stubber.html" title="interface in org.mockito.stubbing">Stubber</a> <b>doReturn</b>(java.lang.Object&nbsp;toBeReturned)</pre>
<dl>
<dd>Use doReturn() in those rare occasions when you cannot use <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#when(T)"><code>when(Object)</code></a>.
 <p>
 <b>Beware that <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#when(T)"><code>when(Object)</code></a> is always recommended for stubbing because it is argument type-safe 
 and more readable</b> (especially when stubbing consecutive calls). 
 </p><p>
 Here are those rare occasions when doReturn() comes handy:
 </p><p>
 
 1. When spying real objects and calling real methods on a spy brings side effects  
 
 </p><pre>   List list = new LinkedList();
   List spy = spy(list);
   
   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)
   when(spy.get(0)).thenReturn("foo");
   
   //You have to use doReturn() for stubbing:
   doReturn("foo").when(spy).get(0);
 </pre>
 
 2. Overriding a previous exception-stubbing:
 
 <pre>   when(mock.foo()).thenThrow(new RuntimeException());
   
   //Impossible: the exception-stubbed foo() method is called so RuntimeException is thrown. 
   when(mock.foo()).thenReturn("bar");
   
   //You have to use doReturn() for stubbing:
   doReturn("bar").when(mock).foo();
 </pre>
 
 Above scenarios shows a tradeoff of Mockito's ellegant syntax. Note that the scenarios are very rare, though. 
 Spying should be sporadic and overriding exception-stubbing is very rare. Not to mention that in general
 overridding stubbing is a potential code smell that points out too much stubbing.
 <p>
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
</p><p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>toBeReturned</code> - to be returned when the stubbed method is called
</dd><dt><b>Returns:</b></dt><dd>stubber - to select a method for stubbing</dd></dl>
</dd>
</dl>
<hr>

<a name="inOrder(java.lang.Object...)"><!-- --></a><h3>
inOrder</h3>
<pre>public static <a href="http://docs.mockito.googlecode.com/hg/org/mockito/InOrder.html" title="interface in org.mockito">InOrder</a> <b>inOrder</b>(java.lang.Object...&nbsp;mocks)</pre>
<dl>
<dd>Creates InOrder object that allows verifying mocks in order.
 
 <pre>   InOrder inOrder = inOrder(firstMock, secondMock);
   
   inOrder.verify(firstMock).add("was called first");
   inOrder.verify(secondMock).add("was called second");
 </pre>
 
 Verification in order is flexible - <b>you don't have to verify all interactions</b> one-by-one
 but only those that you are interested in testing in order.
 <p>
 Also, you can create InOrder object passing only mocks that are relevant for in-order verification.
 </p><p>
 InOrder verification is 'greedy'. You will hardly every notice it but 
 if you want to find out more search for 'greedy' on the Mockito 
 <a href="http://code.google.com/p/mockito/w/list">wiki pages</a>.  
 </p><p>
 As of Mockito 1.8.4 you can verifyNoMoreInvocations() in order-sensitive way. Read more: <a href="http://docs.mockito.googlecode.com/hg/org/mockito/InOrder.html#verifyNoMoreInteractions()"><code>InOrder.verifyNoMoreInteractions()</code></a>
 </p><p>
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
</p><p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>mocks</code> - to be verified in order
</dd><dt><b>Returns:</b></dt><dd>InOrder object to be used to verify in order</dd></dl>
</dd>
</dl>
<hr>

<a name="times(int)"><!-- --></a><h3>
times</h3>
<pre>public static <a href="http://docs.mockito.googlecode.com/hg/org/mockito/verification/VerificationMode.html" title="interface in org.mockito.verification">VerificationMode</a> <b>times</b>(int&nbsp;wantedNumberOfInvocations)</pre>
<dl>
<dd>Allows verifying exact number of invocations. E.g:
 <pre>   verify(mock, times(2)).someMethod("some arg");
 </pre>
 
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
<p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>wantedNumberOfInvocations</code> - wanted number of invocations
</dd><dt><b>Returns:</b></dt><dd>verification mode</dd></dl>
</dd>
</dl>
<hr>

<a name="never()"><!-- --></a><h3>
never</h3>
<pre>public static <a href="http://docs.mockito.googlecode.com/hg/org/mockito/verification/VerificationMode.html" title="interface in org.mockito.verification">VerificationMode</a> <b>never</b>()</pre>
<dl>
<dd>Alias to times(0), see <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#times(int)"><code>times(int)</code></a>
 <p>
 Verifies that interaction did not happen. E.g:
 </p><pre>   verify(mock, never()).someMethod();
 </pre>
 
 <p>
 If you want to verify there were NO interactions with the mock 
 check out <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#verifyZeroInteractions(java.lang.Object...)"><code>verifyZeroInteractions(Object...)</code></a>
 or <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#verifyNoMoreInteractions(java.lang.Object...)"><code>verifyNoMoreInteractions(Object...)</code></a>
 </p><p>
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
</p><p>
</p></dd><dd><dl>

<dt><b>Returns:</b></dt><dd>verification mode</dd></dl>
</dd>
</dl>
<hr>

<a name="atLeastOnce()"><!-- --></a><h3>
atLeastOnce</h3>
<pre>public static <a href="http://docs.mockito.googlecode.com/hg/org/mockito/verification/VerificationMode.html" title="interface in org.mockito.verification">VerificationMode</a> <b>atLeastOnce</b>()</pre>
<dl>
<dd>Allows at-least-once verification. E.g:
 <pre>   verify(mock, atLeastOnce()).someMethod("some arg");
 </pre>
 Alias to atLeast(1)
 <p>
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
</p><p>
</p></dd><dd><dl>

<dt><b>Returns:</b></dt><dd>verification mode</dd></dl>
</dd>
</dl>
<hr>

<a name="atLeast(int)"><!-- --></a><h3>
atLeast</h3>
<pre>public static <a href="http://docs.mockito.googlecode.com/hg/org/mockito/verification/VerificationMode.html" title="interface in org.mockito.verification">VerificationMode</a> <b>atLeast</b>(int&nbsp;minNumberOfInvocations)</pre>
<dl>
<dd>Allows at-least-x verification. E.g:
 <pre>   verify(mock, atLeast(3)).someMethod("some arg");
 </pre>
 
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
<p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>minNumberOfInvocations</code> - minimum number of invocations
</dd><dt><b>Returns:</b></dt><dd>verification mode</dd></dl>
</dd>
</dl>
<hr>

<a name="atMost(int)"><!-- --></a><h3>
atMost</h3>
<pre>public static <a href="http://docs.mockito.googlecode.com/hg/org/mockito/verification/VerificationMode.html" title="interface in org.mockito.verification">VerificationMode</a> <b>atMost</b>(int&nbsp;maxNumberOfInvocations)</pre>
<dl>
<dd>Allows at-most-x verification. E.g:
 <pre>   verify(mock, atMost(3)).someMethod("some arg");
 </pre>
 
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
<p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>maxNumberOfInvocations</code> - max number of invocations
</dd><dt><b>Returns:</b></dt><dd>verification mode</dd></dl>
</dd>
</dl>
<hr>

<a name="only()"><!-- --></a><h3>
only</h3>
<pre>public static <a href="http://docs.mockito.googlecode.com/hg/org/mockito/verification/VerificationMode.html" title="interface in org.mockito.verification">VerificationMode</a> <b>only</b>()</pre>
<dl>
<dd>Allows checking if given method was the only one invoked. E.g:
 <pre>   verify(mock, only()).someMethod();
   //above is a shorthand for following 2 lines of code:
   verify(mock).someMethod();
   verifyNoMoreInvocations(mock);
 </pre>
 
 <p>
 See also <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#verifyNoMoreInteractions(java.lang.Object...)"><code>verifyNoMoreInteractions(Object...)</code></a>
 </p><p>
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
</p><p>
</p></dd><dd><dl>

<dt><b>Returns:</b></dt><dd>verification mode</dd></dl>
</dd>
</dl>
<hr>

<a name="timeout(int)"><!-- --></a><h3>
timeout</h3>
<pre>public static <a href="http://docs.mockito.googlecode.com/hg/org/mockito/verification/VerificationWithTimeout.html" title="interface in org.mockito.verification">VerificationWithTimeout</a> <b>timeout</b>(int&nbsp;millis)</pre>
<dl>
<dd>Allows verifying with timeout. May be useful for testing in concurrent conditions.
 <p>
 It feels this feature should be used rarely - figure out a better way of testing your multi-threaded system
 </p><p>
 Not yet implemented to work with InOrder verification.
 </p><pre>   //passes when someMethod() is called within given time span 
   verify(mock, timeout(100)).someMethod();
   //above is an alias to:
   verify(mock, timeout(100).times(1)).someMethod();
   
   //passes when someMethod() is called *exactly* 2 times within given time span
   verify(mock, timeout(100).times(2)).someMethod();

   //passes when someMethod() is called *at lest* 2 times within given time span
   verify(mock, timeout(100).atLeast(2)).someMethod();
   
   //verifies someMethod() within given time span using given verification mode
   //useful only if you have your own custom verification modes.
   verify(mock, new Timeout(100, yourOwnVerificationMode)).someMethod();
 </pre>
 
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
<p>
</p></dd><dd><dl>
<dt><b>Parameters:</b></dt><dd><code>millis</code> - - time span in millis
</dd><dt><b>Returns:</b></dt><dd>verification mode</dd></dl>
</dd>
</dl>
<hr>

<a name="validateMockitoUsage()"><!-- --></a><h3>
validateMockitoUsage</h3>
<pre>public static void <b>validateMockitoUsage</b>()</pre>
<dl>
<dd>First of all, in case of any trouble, I encourage you to read the Mockito FAQ: <a href="http://code.google.com/p/mockito/wiki/FAQ">http://code.google.com/p/mockito/wiki/FAQ</a>
 <p>
 In case of questions you may also post to mockito mailing list: <a href="http://groups.google.com/group/mockito">http://groups.google.com/group/mockito</a> 
 </p><p>
 validateMockitoUsage() <b>explicitly validates</b> the framework state to detect invalid use of Mockito.
 However, this feature is optional <b>because Mockito validates the usage all the time...</b> but there is a gotcha so read on.
 </p><p>
 Examples of incorrect use:
 </p><pre> //Oups, someone forgot thenReturn() part:
 when(mock.get());
 
 //Oups, someone put the verified method call inside verify() where it should be outside:
 verify(mock.execute());
 
 //Oups, someone has used EasyMock for too long and forgot to specify the method to verify:
 verify(mock);
 </pre>
 
 Mockito throws exceptions if you misuse it so that you know if your tests are written correctly. 
 The gotcha is that Mockito does the validation <b>next time</b> you use the framework (e.g. next time you verify, stub, call mock etc.). 
 But even though the exception might be thrown in the next test, 
 the exception <b>message contains a navigable stack trace element</b> with location of the defect. 
 Hence you can click and find the place where Mockito was misused.
 <p>
 Sometimes though, you might want to validate the framework usage explicitly. 
 For example, one of the users wanted to put validateMockitoUsage() in his @After method
 so that he knows immediately when he misused Mockito. 
 Without it, he would have known about it not sooner than <b>next time</b> he used the framework.
 One more benefit of having validateMockitoUsage() in @After is that jUnit runner will always fail in the test method with defect
 whereas ordinary 'next-time' validation might fail the <b>next</b> test method. 
 But even though JUnit might report next test as red, don't worry about it 
 and just click at navigable stack trace element in the exception message to instantly locate the place where you misused mockito.   
 </p><p>
 <b>Built-in runner: <a href="http://docs.mockito.googlecode.com/hg/org/mockito/runners/MockitoJUnitRunner.html" title="class in org.mockito.runners"><code>MockitoJUnitRunner</code></a></b> does validateMockitoUsage() after each test method.
 </p><p>
 Bear in mind that <b>usually you don't have to validateMockitoUsage()</b> 
 and framework validation triggered on next-time basis should be just enough,
 mainly because of enhanced exception message with clickable location of defect.
 However, I would recommend validateMockitoUsage() if you already have sufficient test infrastructure
 (like your own runner or base class for all tests) because adding a special action to @After has zero cost.
 </p><p>
 See examples in javadoc for <a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" title="class in org.mockito"><code>Mockito</code></a> class
</p><p>
</p></dd><dd><dl>
</dl>
</dd>
</dl>
<hr>

<a name="withSettings()"><!-- --></a><h3>
withSettings</h3>
<pre>public static <a href="http://docs.mockito.googlecode.com/hg/org/mockito/MockSettings.html" title="interface in org.mockito">MockSettings</a> <b>withSettings</b>()</pre>
<dl>
<dd>Allows mock creation with additional mock settings. 
 <p>
 Don't use it too often. 
 Consider writing simple tests that use simple mocks. 
 Repeat after me: simple tests push simple, KISSy, readable &amp; maintainable code.
 If you cannot write a test in a simple way - refactor the code under test.
 </p><p>
 Examples of mock settings:
 </p><pre>   //Creates mock with different default answer &amp; name
   Foo mock = mock(Foo.class, withSettings()
       .defaultAnswer(RETURNS_SMART_NULLS)
       .name("cool mockie"));
       
   //Creates mock with different default answer, descriptive name and extra interfaces
   Foo mock = mock(Foo.class, withSettings()
       .defaultAnswer(RETURNS_SMART_NULLS)
       .name("cool mockie")
       .extraInterfaces(Bar.class));    
 </pre>
 <a href="http://docs.mockito.googlecode.com/hg/org/mockito/MockSettings.html" title="interface in org.mockito"><code>MockSettings</code></a> has been introduced for two reasons. 
 Firstly, to make it easy to add another mock settings when the demand comes.
 Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.
 <p>
 See javadoc for <a href="http://docs.mockito.googlecode.com/hg/org/mockito/MockSettings.html" title="interface in org.mockito"><code>MockSettings</code></a> to learn about possible mock settings.
 </p><p>
</p><p>
</p></dd><dd><dl>

<dt><b>Returns:</b></dt><dd>mock settings instance with defaults.</dd></dl>
</dd>
</dl>
<!-- ========= END OF CLASS DATA ========= -->
<hr>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<a name="navbar_bottom"><!-- --></a>
<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#skip-navbar_bottom" title="Skip navigation links"></a>
<table border="0" width="100%" cellpadding="1" cellspacing="0" summary="">
<tbody><tr>
<td colspan="2" bgcolor="#EEEEFF" class="NavBarCell1">
<a name="navbar_bottom_firstrow"><!-- --></a>
<table border="0" cellpadding="0" cellspacing="3" summary="">
  <tbody><tr align="center" valign="top">
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="http://docs.mockito.googlecode.com/hg/overview-summary.html"><font class="NavBarFont1"><b>Overview</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="http://docs.mockito.googlecode.com/hg/org/mockito/package-summary.html"><font class="NavBarFont1"><b>Package</b></font></a>&nbsp;</td>
  <td bgcolor="#FFFFFF" class="NavBarCell1Rev"> &nbsp;<font class="NavBarFont1Rev"><b>Class</b></font>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="http://docs.mockito.googlecode.com/hg/org/mockito/class-use/Mockito.html"><font class="NavBarFont1"><b>Use</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="http://docs.mockito.googlecode.com/hg/org/mockito/package-tree.html"><font class="NavBarFont1"><b>Tree</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="http://docs.mockito.googlecode.com/hg/deprecated-list.html"><font class="NavBarFont1"><b>Deprecated</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="http://docs.mockito.googlecode.com/hg/index-all.html"><font class="NavBarFont1"><b>Index</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="http://docs.mockito.googlecode.com/hg/help-doc.html"><font class="NavBarFont1"><b>Help</b></font></a>&nbsp;</td>
  </tr>
</tbody></table>
</td>
<td align="right" valign="top" rowspan="3"><em>
</em>
</td>
</tr>

<tr>
<td bgcolor="white" class="NavBarCell2"><font size="-2">
&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mock.html" title="annotation in org.mockito"><b>PREV CLASS</b></a>&nbsp;
&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/MockitoAnnotations.html" title="class in org.mockito"><b>NEXT CLASS</b></a></font></td>
<td bgcolor="white" class="NavBarCell2"><font size="-2">
  <a href="http://docs.mockito.googlecode.com/hg/index.html?org/mockito/Mockito.html" target="_top"><b>FRAMES</b></a>  &nbsp;
&nbsp;<a href="./Mockito (Mockito API)_files/Mockito (Mockito API).htm" target="_top"><b>NO FRAMES</b></a>  &nbsp;
&nbsp;<script type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</script><a href="http://docs.mockito.googlecode.com/hg/allclasses-noframe.html"><b>All Classes</b></a>

<noscript>
  &lt;A HREF="../../allclasses-noframe.html"&gt;&lt;B&gt;All Classes&lt;/B&gt;&lt;/A&gt;
</noscript>


</font></td>
</tr>
<tr>
<td valign="top" class="NavBarCell3"><font size="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#field_summary">FIELD</a>&nbsp;|&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#constructor_summary">CONSTR</a>&nbsp;|&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#method_summary">METHOD</a></font></td>
<td valign="top" class="NavBarCell3"><font size="-2">
DETAIL:&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#field_detail">FIELD</a>&nbsp;|&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#constructor_detail">CONSTR</a>&nbsp;|&nbsp;<a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#method_detail">METHOD</a></font></td>
</tr>
</tbody></table>
<a name="skip-navbar_bottom"></a>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<hr>



</body></html>